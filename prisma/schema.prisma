// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  name       String
  email      String?  @unique
  avatar_url String?
  created_at DateTime @default(now())
  bio        String?  @db.Text //longer text vars

  accounts  Account[]
  sessions  Session[]
  timeSlots UserTimeSlot[]
  meetings  Meeting[]

  @@map("Users")
}

// Many accounts to one user (one per provider)
model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? @db.Text
  access_token        String? @db.Text //this is what we need to call Google API
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("Accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("Sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserTimeSlot {
  id                String @id @default(uuid())
  time_start_in_min Int
  time_end_in_min   Int
  week_day          Int

  user_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("UserTimeSlots")
}

model Meeting {
  id         String   @id @default(uuid())
  date       DateTime
  name       String // name of requester
  email      String // email of requester
  notes      String?
  created_at DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  @@map("Meetings")
}
